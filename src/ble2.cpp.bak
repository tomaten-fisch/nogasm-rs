/**
 * A BLE client example that is rich in capabilities.
 * There is a lot new capabilities implemented.
 * author unknown
 * updated by chegewara
 */

#include "ble.h"

#include "BLEDevice.h"

// The remote service we wish to connect to.
static BLEUUID serviceUUID("57300001-0023-4bd4-bbd5-a6920e4c5653");
// The characteristic of the remote service we are interested in.
static BLEUUID    charUUID("57300002-0023-4bd4-bbd5-a6920e4c5653");

static bool scanning;
static bool connected;
static BLERemoteCharacteristic* pRemoteCharacteristic;
static BLEAdvertisedDevice* myDevice;


extern "C" uint8_t is_connected() {
  return (uint8_t)connected;
}
String newValue = "Time since boot: " + String(millis()/1000);


class MyClientCallback : public BLEClientCallbacks {
  void onConnect(BLEClient* pclient) {
  }

  void onDisconnect(BLEClient* pclient) {
    connected = false;
  }
};

bool connectToServer() {
    BLEClient* pClient  = BLEDevice::createClient();

    pClient->setClientCallbacks(new MyClientCallback());

    // Connect to the remove BLE Server.
    pClient->connect(myDevice);  // if you pass BLEAdvertisedDevice instead of address, it will be recognized type of peer device address (public or private)
    pClient->setMTU(517); //set client to request maximum MTU from server (default is 23 otherwise)

    // Obtain a reference to the service we are after in the remote BLE server.
    BLERemoteService* pRemoteService = pClient->getService(serviceUUID);
    if (pRemoteService == nullptr) {
      pClient->disconnect();
      return false;
    }

    // Obtain a reference to the characteristic in the service of the remote BLE server.
    pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID);
    if (pRemoteCharacteristic == nullptr) {
      pClient->disconnect();
      return false;
    }

    return true;
}

/**
 * Scan for BLE servers and find the first one that advertises the service we are looking for.
 */
class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
 /**
   * Called for each advertising BLE server.
   */
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    // Serial.print("BLE Advertised Device found: ");
    // Serial.println(advertisedDevice.toString().c_str());

    // We have found a device, let us now see if it contains the service we are looking for.
    if (advertisedDevice.haveServiceUUID() && advertisedDevice.isAdvertisingService(serviceUUID)) {

      BLEDevice::getScan()->stop();
      myDevice = new BLEAdvertisedDevice(advertisedDevice);

    } // Found our server
  } // onResult
}; // MyAdvertisedDeviceCallbacks


void ble_init() {
  BLEDevice::init("");

  // Retrieve a Scanner and set the callback we want to use to be informed when we
  // have detected a new device.  Specify that we want active scanning and start the
  // scan to run for 5 seconds.
  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setInterval(1349);
  pBLEScan->setWindow(449);
  pBLEScan->setActiveScan(true);
  pBLEScan->start(5, false);
}

bool has_found_device() {
  return doConnect;
}

void ble_write(char *data, size_t len) {
  pRemoteCharacteristic->writeValue(data, len);
}

void setup() {
} // End of setup.


// This is the Arduino main loop function.
void loop() {

  // If the flag "doConnect" is true then we have scanned for and found the desired
  // BLE Server with which we wish to connect.  Now we connect to it.  Once we are
  // connected we set the connected flag to be true.
  if (doConnect == true) {
    if (connectToServer()) {
    //   Serial.println("We are now connected to the BLE Server.");
    } else {
    //   Serial.println("We have failed to connect to the server; there is nothin more we will do.");
    }
    doConnect = false;
  }

  // If we are connected to a peer BLE Server, update the characteristic each time we are reached
  // with the current time since boot.
  if (connected) {
    // delay(1000);
    // String printVal = "Vibrate:10;";
    // Serial.println(printVal);
    // pRemoteCharacteristic->writeValue(printVal.c_str(), printVal.length());
    // delay(1000);
    // printVal = "Vibrate:15;";
    // Serial.println(printVal);
    // pRemoteCharacteristic->writeValue(printVal.c_str(), printVal.length());
    // delay(1000);
    // printVal = "Vibrate:20;";
    // Serial.println(printVal);
    // pRemoteCharacteristic->writeValue(printVal.c_str(), printVal.length());
    // delay(1000);
    // printVal = "Vibrate:3;";
    // Serial.println(printVal);
    // pRemoteCharacteristic->writeValue(printVal.c_str(), printVal.length());
    // delay(1000);
    // printVal = "Vibrate:8;";
    // Serial.println(printVal);
    // pRemoteCharacteristic->writeValue(printVal.c_str(), printVal.length());
    // delay(1000);
    // printVal = "Vibrate:0;";
    // Serial.println(printVal);
    // pRemoteCharacteristic->writeValue(printVal.c_str(), printVal.length());
    // delay(1000);
//    String newValue = "Time since boot: " + String(millis()/1000);
//    Serial.println("Setting new characteristic value to \"" + newValue + "\"");

    // Set the characteristic's value to be the array of bytes that is actually a string.
//    pRemoteCharacteristic->writeValue(newValue.c_str(), newValue.length());
  }else if(doScan){
    BLEDevice::getScan()->start(0);  // this is just example to start scan after disconnect, most likely there is better way to do it in arduino
  }

//   delay(1000); // Delay a second between loops.
} // End of loop
